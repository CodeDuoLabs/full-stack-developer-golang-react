/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Task Manager API
 * A simple task management API built with Go and Gin.
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetTasks200,
  GetTasksId200,
  ModelTask,
  PostTasks201,
  PutTasksId200,
  TaskManagerInternalResponseResponse,
} from "../models";
import { customInstance } from "../client/apiClient";

/**
 * Retrieves a list of all tasks stored in the database.
 * @summary List all tasks
 */
export const getTasks = (signal?: AbortSignal) => {
  return customInstance<GetTasks200>({ url: `/tasks`, method: "GET", signal });
};

export const getGetTasksQueryKey = () => {
  return [`/tasks`] as const;
};

export const getGetTasksQueryOptions = <
  TData = Awaited<ReturnType<typeof getTasks>>,
  TError = TaskManagerInternalResponseResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTasksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTasks>>> = ({
    signal,
  }) => getTasks(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTasks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTasksQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTasks>>
>;
export type GetTasksQueryError = TaskManagerInternalResponseResponse;

export function useGetTasks<
  TData = Awaited<ReturnType<typeof getTasks>>,
  TError = TaskManagerInternalResponseResponse,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getTasks>>,
        TError,
        Awaited<ReturnType<typeof getTasks>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTasks<
  TData = Awaited<ReturnType<typeof getTasks>>,
  TError = TaskManagerInternalResponseResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getTasks>>,
        TError,
        Awaited<ReturnType<typeof getTasks>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTasks<
  TData = Awaited<ReturnType<typeof getTasks>>,
  TError = TaskManagerInternalResponseResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all tasks
 */

export function useGetTasks<
  TData = Awaited<ReturnType<typeof getTasks>>,
  TError = TaskManagerInternalResponseResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTasks>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTasksQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a task with the provided name and status.
 * @summary Create a new task
 */
export const postTasks = (modelTask: ModelTask, signal?: AbortSignal) => {
  return customInstance<PostTasks201>({
    url: `/tasks`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: modelTask,
    signal,
  });
};

export const getPostTasksMutationOptions = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTasks>>,
    TError,
    { data: ModelTask },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTasks>>,
  TError,
  { data: ModelTask },
  TContext
> => {
  const mutationKey = ["postTasks"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTasks>>,
    { data: ModelTask }
  > = (props) => {
    const { data } = props ?? {};

    return postTasks(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostTasksMutationResult = NonNullable<
  Awaited<ReturnType<typeof postTasks>>
>;
export type PostTasksMutationBody = ModelTask;
export type PostTasksMutationError = TaskManagerInternalResponseResponse;

/**
 * @summary Create a new task
 */
export const usePostTasks = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTasks>>,
    TError,
    { data: ModelTask },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postTasks>>,
  TError,
  { data: ModelTask },
  TContext
> => {
  const mutationOptions = getPostTasksMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieves a task by its unique identifier.
 * @summary Get a task
 */
export const getTasksId = (id: string, signal?: AbortSignal) => {
  return customInstance<GetTasksId200>({
    url: `/tasks/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetTasksIdQueryKey = (id: string) => {
  return [`/tasks/${id}`] as const;
};

export const getGetTasksIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTasksId>>,
  TError = TaskManagerInternalResponseResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTasksId>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTasksIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTasksId>>> = ({
    signal,
  }) => getTasksId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTasksId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTasksIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTasksId>>
>;
export type GetTasksIdQueryError = TaskManagerInternalResponseResponse;

export function useGetTasksId<
  TData = Awaited<ReturnType<typeof getTasksId>>,
  TError = TaskManagerInternalResponseResponse,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTasksId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTasksId>>,
          TError,
          Awaited<ReturnType<typeof getTasksId>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTasksId<
  TData = Awaited<ReturnType<typeof getTasksId>>,
  TError = TaskManagerInternalResponseResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTasksId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTasksId>>,
          TError,
          Awaited<ReturnType<typeof getTasksId>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTasksId<
  TData = Awaited<ReturnType<typeof getTasksId>>,
  TError = TaskManagerInternalResponseResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTasksId>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a task
 */

export function useGetTasksId<
  TData = Awaited<ReturnType<typeof getTasksId>>,
  TError = TaskManagerInternalResponseResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTasksId>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTasksIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates the details of a task identified by its ID.
 * @summary Update a task
 */
export const putTasksId = (id: string, modelTask: ModelTask) => {
  return customInstance<PutTasksId200>({
    url: `/tasks/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: modelTask,
  });
};

export const getPutTasksIdMutationOptions = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTasksId>>,
    TError,
    { id: string; data: ModelTask },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putTasksId>>,
  TError,
  { id: string; data: ModelTask },
  TContext
> => {
  const mutationKey = ["putTasksId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putTasksId>>,
    { id: string; data: ModelTask }
  > = (props) => {
    const { id, data } = props ?? {};

    return putTasksId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutTasksIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putTasksId>>
>;
export type PutTasksIdMutationBody = ModelTask;
export type PutTasksIdMutationError = TaskManagerInternalResponseResponse;

/**
 * @summary Update a task
 */
export const usePutTasksId = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTasksId>>,
    TError,
    { id: string; data: ModelTask },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putTasksId>>,
  TError,
  { id: string; data: ModelTask },
  TContext
> => {
  const mutationOptions = getPutTasksIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Deletes a task identified by its unique identifier.
 * @summary Delete a task
 */
export const deleteTasksId = (id: string) => {
  return customInstance<TaskManagerInternalResponseResponse>({
    url: `/tasks/${id}`,
    method: "DELETE",
  });
};

export const getDeleteTasksIdMutationOptions = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTasksId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTasksId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteTasksId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTasksId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTasksId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTasksIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTasksId>>
>;

export type DeleteTasksIdMutationError = TaskManagerInternalResponseResponse;

/**
 * @summary Delete a task
 */
export const useDeleteTasksId = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTasksId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTasksId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteTasksIdMutationOptions(options);

  return useMutation(mutationOptions);
};
