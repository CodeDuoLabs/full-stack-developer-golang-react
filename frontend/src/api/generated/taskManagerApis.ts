/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Task Manager API
 * A simple task management API built with Go and Gin.
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CreateTask201,
  GetTaskByID200,
  ListTasks200,
  ModelTask,
  TaskManagerInternalResponseResponse,
  UpdateTask200,
} from "../models";
import { customInstance } from "../client/apiClient";

/**
 * Retrieves a list of all tasks stored in the database.
 * @summary List all tasks
 */
export const listTasks = (signal?: AbortSignal) => {
  return customInstance<ListTasks200>({ url: `/tasks`, method: "GET", signal });
};

export const getListTasksQueryKey = () => {
  return [`/tasks`] as const;
};

export const getListTasksQueryOptions = <
  TData = Awaited<ReturnType<typeof listTasks>>,
  TError = TaskManagerInternalResponseResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTasks>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListTasksQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listTasks>>> = ({
    signal,
  }) => listTasks(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listTasks>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListTasksQueryResult = NonNullable<
  Awaited<ReturnType<typeof listTasks>>
>;
export type ListTasksQueryError = TaskManagerInternalResponseResponse;

export function useListTasks<
  TData = Awaited<ReturnType<typeof listTasks>>,
  TError = TaskManagerInternalResponseResponse,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTasks>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof listTasks>>,
        TError,
        Awaited<ReturnType<typeof listTasks>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListTasks<
  TData = Awaited<ReturnType<typeof listTasks>>,
  TError = TaskManagerInternalResponseResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTasks>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof listTasks>>,
        TError,
        Awaited<ReturnType<typeof listTasks>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListTasks<
  TData = Awaited<ReturnType<typeof listTasks>>,
  TError = TaskManagerInternalResponseResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTasks>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List all tasks
 */

export function useListTasks<
  TData = Awaited<ReturnType<typeof listTasks>>,
  TError = TaskManagerInternalResponseResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listTasks>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListTasksQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Creates a task with the provided name and status.
 * @summary Create a new task
 */
export const createTask = (modelTask: ModelTask, signal?: AbortSignal) => {
  return customInstance<CreateTask201>({
    url: `/tasks`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: modelTask,
    signal,
  });
};

export const getCreateTaskMutationOptions = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTask>>,
    TError,
    { data: ModelTask },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTask>>,
  TError,
  { data: ModelTask },
  TContext
> => {
  const mutationKey = ["createTask"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTask>>,
    { data: ModelTask }
  > = (props) => {
    const { data } = props ?? {};

    return createTask(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTaskMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTask>>
>;
export type CreateTaskMutationBody = ModelTask;
export type CreateTaskMutationError = TaskManagerInternalResponseResponse;

/**
 * @summary Create a new task
 */
export const useCreateTask = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTask>>,
    TError,
    { data: ModelTask },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createTask>>,
  TError,
  { data: ModelTask },
  TContext
> => {
  const mutationOptions = getCreateTaskMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Retrieves a task by its unique identifier.
 * @summary Get a task
 */
export const getTaskByID = (id: string, signal?: AbortSignal) => {
  return customInstance<GetTaskByID200>({
    url: `/tasks/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetTaskByIDQueryKey = (id: string) => {
  return [`/tasks/${id}`] as const;
};

export const getGetTaskByIDQueryOptions = <
  TData = Awaited<ReturnType<typeof getTaskByID>>,
  TError = TaskManagerInternalResponseResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTaskByID>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTaskByIDQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskByID>>> = ({
    signal,
  }) => getTaskByID(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTaskByID>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTaskByIDQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTaskByID>>
>;
export type GetTaskByIDQueryError = TaskManagerInternalResponseResponse;

export function useGetTaskByID<
  TData = Awaited<ReturnType<typeof getTaskByID>>,
  TError = TaskManagerInternalResponseResponse,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTaskByID>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskByID>>,
          TError,
          Awaited<ReturnType<typeof getTaskByID>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTaskByID<
  TData = Awaited<ReturnType<typeof getTaskByID>>,
  TError = TaskManagerInternalResponseResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTaskByID>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTaskByID>>,
          TError,
          Awaited<ReturnType<typeof getTaskByID>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTaskByID<
  TData = Awaited<ReturnType<typeof getTaskByID>>,
  TError = TaskManagerInternalResponseResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTaskByID>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a task
 */

export function useGetTaskByID<
  TData = Awaited<ReturnType<typeof getTaskByID>>,
  TError = TaskManagerInternalResponseResponse,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTaskByID>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTaskByIDQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates the details of a task identified by its ID.
 * @summary Update a task
 */
export const updateTask = (id: string, modelTask: ModelTask) => {
  return customInstance<UpdateTask200>({
    url: `/tasks/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: modelTask,
  });
};

export const getUpdateTaskMutationOptions = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTask>>,
    TError,
    { id: string; data: ModelTask },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTask>>,
  TError,
  { id: string; data: ModelTask },
  TContext
> => {
  const mutationKey = ["updateTask"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTask>>,
    { id: string; data: ModelTask }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateTask(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTaskMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTask>>
>;
export type UpdateTaskMutationBody = ModelTask;
export type UpdateTaskMutationError = TaskManagerInternalResponseResponse;

/**
 * @summary Update a task
 */
export const useUpdateTask = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTask>>,
    TError,
    { id: string; data: ModelTask },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateTask>>,
  TError,
  { id: string; data: ModelTask },
  TContext
> => {
  const mutationOptions = getUpdateTaskMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Deletes a task identified by its unique identifier.
 * @summary Delete a task
 */
export const deleteTask = (id: string) => {
  return customInstance<TaskManagerInternalResponseResponse>({
    url: `/tasks/${id}`,
    method: "DELETE",
  });
};

export const getDeleteTaskMutationOptions = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTask>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTask>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteTask"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTask>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTask(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTaskMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTask>>
>;

export type DeleteTaskMutationError = TaskManagerInternalResponseResponse;

/**
 * @summary Delete a task
 */
export const useDeleteTask = <
  TError = TaskManagerInternalResponseResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTask>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTask>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteTaskMutationOptions(options);

  return useMutation(mutationOptions);
};
